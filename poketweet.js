// Generated by CoffeeScript 1.10.0
(function() {
  var PokemonGO, _, a, config, location, password, provider, tellLocationInfo, tellProfileInfo, tweetPokemon, username;

  PokemonGO = require('pokemon-go-node-api');

  config = require('./config.json');

  _ = require('lodash');

  a = new PokemonGO.Pokeio;

  location = {
    type: 'name',
    name: config.StartingLocation
  };

  username = config.PTCUsername;

  password = config.PTCPassword;

  provider = config.Provider;

  tellProfileInfo = function(err, profile) {
    var poke;
    if (err) {
      throw err;
    }
    console.log('[i] Username: ' + profile.username);
    console.log('[i] Poke Storage: ' + profile.poke_storage);
    console.log('[i] Item Storage: ' + profile.item_storage);
    poke = 0;
    if (profile.currency[0].amount) {
      poke = profile.currency[0].amount;
    }
    console.log('[i] Pokecoin: ' + poke);
    return console.log('[i] Stardust: ' + profile.currency[1].amount);
  };

  tellLocationInfo = function(err) {
    if (err) {
      throw err;
    }
    console.log('[i] Current location: ' + a.playerInfo.locationName);
    return console.log('[i] lat/long/alt: : ' + a.playerInfo.latitude + ' ' + a.playerInfo.longitude + ' ' + a.playerInfo.altitude);
  };

  tweetPokemon = function(pokedexEntry, encounteredPokemon) {
    if (_.indexOf(config.PriorityPokemon, parseInt(pokedexEntry.PokedexNumber)) !== -1) {
      return console.log("[+] BREAKING NEWS! SUPER RARE! " + pokedexEntry.name + "! Tweeting immediately!");
    } else {
      return console.log("[+] Found " + pokedexEntry.name + "! Tweeting immediately!");
    }
  };

  a.init(username, password, location, provider, function(err) {
    var locations;
    tellLocationInfo(err);
    locations = config.Locations;
    return a.GetProfile(function(err, profile) {
      var i;
      tellProfileInfo(err, profile);
      i = 0;
      return setInterval((function() {
        var ref;
        if (locations[i + 1] != null) {
          i++;
        } else {
          i = 0;
        }
        console.log("looking for pokemon at ,", (ref = locations[i]) != null ? ref.name : void 0);
        return a.SetLocation(locations[i], function(error) {
          if (error) {
            console.log("error :", error);
          }
          return a.Heartbeat(function(err, hb) {
            var cell, encounteredPokemon, j, len, pokedexEntry, ref1, results;
            if (err) {
              console.log(err);
            }
            ref1 = hb != null ? hb.cells : void 0;
            results = [];
            for (j = 0, len = ref1.length; j < len; j++) {
              cell = ref1[j];
              if (cell.NearbyPokemon[0]) {
                encounteredPokemon = cell.NearbyPokemon[0];
                pokedexEntry = a.pokemonlist[parseInt(encounteredPokemon.PokedexNumber) - 1];
                console.log('[+] There is a ' + pokedexEntry.name + ' at ' + encounteredPokemon.DistanceMeters.toString() + ' meters');
                console.log("encountered : ", encounteredPokemon.EncounterId);
                if (_.indexOf(config.ExcludedPokemon, parseInt(pokedexEntry.PokedexNumber))) {
                  results.push(console.log("[+] " + pokedexEntry.name + " is not a rare pokemon - Ignoring!"));
                } else {
                  results.push(tweetPokemon(pokedexEntry, encounteredPokemon));
                }
              } else {
                results.push(void 0);
              }
            }
            return results;
          });
        });
      }), 5000);
    });
  });

}).call(this);
